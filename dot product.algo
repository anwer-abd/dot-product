PROCEDURE dot_product(v1,v2:ARRAY_OF INTEGER[] ,VAR ps:INTEGER)
VAR 
    i : INTEGER ;
BEGIN
    
    FOR i FROM 0 TO v1.length-1 DO
        ps := ps+(v1[i]*v2[i]);
    END_FOR
END






ALGORITHM orthogonal_with_procedure
VAR
    ps,i,j:INTEGER;
    vectors:ARRAY_OF INTEGER := [[0, 1, 0],[1, 0, 2], [1, 7, 4], [5, 7, 2], [2, 8 ,3], [2, 2, 3]];
BEGIN
    FOR i FROM 0 TO (vectors.length)-1 STEP 1 DO
        FOR j FROM 0 TO (vectors.length)-1 STEP 1  DO
            ps=0;
            dot_product(vectors[i],vectors[j],ps);
            IF (i<>j and  ps=0 ) THEN
                Write(vectors[i],"et",vectors[j],"are orthogonal");
            END_IF
        END_FOR
    END_FOR
END





FUNCTION dot_product(v1,v2:ARRAY_OF INTEGER[]):INTEGER;
VAR
    ps:INTEGER:=0;
    i:INTEGER=0;
BEGIN
    FOR i FROM 0 TO (v1.length)-1 DO
        ps:=ps+(v1[i]*v2[i]);
    END_FOR
    RETURN(ps);
END



ALGORITHM orthogonal_with_function
    var
        i,j:INTEGER;
        vectors:ARRAY_OF INTEGER:=[[0, 1, 0],[1, 0, 3], [1, 9, 4], [5, 7, 2], [2, 6 ,4], [2, 2, 5]];
BEGIN

    FOR i FROM 0 TO (vectors.length)-1 STEP 1 DO

        FOR j FROM 0 TO (vectors.length)-1 STEP 1  DO
            IF ( i<>j AND dot_product(vectors[i],vectors[j]) = 0 ) THEN

                Write(vectors[i],"and",vectors[j],"are orthogonal");

            END_IF
        END_FOR
    END_FOR

END